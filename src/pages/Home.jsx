import React, { useState, useEffect, useRef } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import Header from "../components/header";
import Footer from "../components/Footer";
import WhatsAppButton from "../components/WhatsAppButton";
import "../styles/Home.css";
import { useLanguage } from '../context/LanguageContext';
import PreFooter from "../components/PreFooter";
import { FaHandsHelping } from "react-icons/fa";
import "../styles/Home.css";



// Banner images
import bannerBackground1 from "../assets/imgbanner1.jpg";
import bannerBackground2 from "../assets/imgbanner2.jpg";
import bannerBackground3 from"../assets/imgbanner3.jpg"
import imgcong from "../assets/imgcong.jpg";
import imgval from "../assets/imgemba1.jpg";
import imgcond from "../assets/imgsupp3.png";
import imgcontrole from "../assets/imgcontrole.jpeg";
import imgselection from "../assets/imgselection.jpeg";
import imgembalage from "../assets/imgemb1.jpeg";
import imgsuivi from "../assets/imgsuivi.jpeg";

// Icons
import { FaFish, FaCheckCircle, FaBox, FaShippingFast } from "react-icons/fa";

// Data constants
const heroTexts = [
  {
    title: "ABXTRADING",
    description: "ABXTRADING est un groupe marocain de premier plan, sp√©cialis√© dans l'exportation de poissons et de fruits de mer frais et vivants."
  },
  {
    title: "Qualit√© Sup√©rieure",
    description: "Nous nous engageons √† fournir des produits marins de qualit√© sup√©rieure, tout en respectant les normes les plus strictes en mati√®re de durabilit√© et de s√©curit√© alimentaire."
  },
  {
    title: "Engagement et Durabilit√©",
    description: "Notre engagement envers la durabilit√© et la s√©curit√© alimentaire est au c≈ìur de notre mission, garantissant des produits de la mer de la plus haute qualit√©."
  }
];

const services = [
  {
    id: 1,
    title: "Exportation de poissons et fruits de mer frais et vivants",
    description: "Gr√¢ce √† notre r√©seau mondial, nous assurons des livraisons fiables et ponctuelles de poissons et fruits de mer frais vivants et congel√©s, adapt√©s aux besoins des march√©s internationaux.",
    icon: <FaShippingFast size={24} />,
    image: imgcong // Remplacez par vos images r√©elles
  },
  {
    id: 2,
    title: "Traitement et emballage adapt√©s",
    description: "Nous offrons un service de traitement, de nettoyage et d‚Äôemballage de vos produits marins en conformit√© avec les normes internationales, garantissant ainsi leur fra√Æcheur et leur qualit√© jusqu'√† leur arriv√©e.",
    icon: <FaBox size={24} />,
    image: imgval // Remplacez par vos images r√©elles
  },
  {
    id: 3,
    title: "Support client d√©di√©",
    description: "Notre √©quipe exp√©riment√©e est √† votre disposition pour vous fournir un accompagnement personnalis√© tout au long du processus, depuis la commande jusqu‚Äô√† la livraison. Nous nous engageons √† r√©pondre √† vos besoins et √† garantir une exp√©rience client optimale.",
    icon: <FaHandsHelping size={24} />,
    image: imgcond // Remplacez par vos images r√©elles
  }
];

const whyChooseUs = [
  {
    icon: "üîç",
    title: "Tra√ßabilit√© et transparence",
    description: "ABXTRADING offre une tra√ßabilit√© totale de chaque produit, garantissant que vous puissiez suivre l‚Äôorigine et le parcours de chaque lot de mani√®re transparente."
  },
  {
    icon: "‚è±Ô∏è",
    title: "D√©lais de livraison garantis",
    description: "Nous savons √† quel point la ponctualit√© est cruciale. Nous assurons des d√©lais de livraison respect√©s gr√¢ce √† une gestion efficace de nos flux logistiques."
  },
  {
    icon: "ü§ù",
    title: "Partenaire de confiance",
    description: "Avec ABXTRADING, vous b√©n√©ficiez d'un partenaire fiable, capable de fournir des solutions de qualit√© adapt√©es aux exigences sp√©cifiques de vos march√©s. Nous privil√©gions une relation de long terme fond√©e sur la confiance et l'excellence."
  }
];

const processusProduction = [
  {
    id: 1,
    title: "S√©lection des Produits",
    description: "Nos produits sont soigneusement s√©lectionn√©s par nos experts en fonction de leur fra√Æcheur, leur taille et leur qualit√©.",
    icon: <FaFish size={24} />, // Ic√¥ne pour la s√©lection des produits
    image: imgselection
  },
  {
    id: 2,
    title: "Contr√¥le de la Qualit√©",
    description: "Chaque produit subit un contr√¥le qualit√© rigoureux pour garantir sa fra√Æcheur et sa s√©curit√©.",
    icon: <FaCheckCircle size={24} />, // Ic√¥ne pour le contr√¥le qualit√©
    image: imgcontrole
  },
  {
    id: 3,
    title: "Emballage et Exp√©dition",
    description: "Les produits sont emball√©s dans des conditions optimales pour pr√©server leur fra√Æcheur.",
    icon: <FaBox size={24} />, // Ic√¥ne pour l'emballage
    image: imgembalage
  },
  {
    id: 4,
    title: "Suivi et Livraison",
    description: "Nous assurons un suivi constant pour garantir une livraison rapide et s√©curis√©e.",
    icon: <FaShippingFast size={24} />, // Ic√¥ne pour le suivi et la livraison
    image: imgsuivi
  }
];

// ServiceCard Component
const ServiceCard = ({ title, description, icon, image, index }) => {
  const cardRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const [entry] = entries;
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          
          // Animation progressive des √©l√©ments internes
          const titleElem = entry.target.querySelector('.service-title');
          const descElem = entry.target.querySelector('.service-description');
          const imgElem = entry.target.querySelector('.service-image-container');
          
          // Ajouter des v√©rifications avant setTimeout
          let timers = [];
          if (titleElem) timers.push(setTimeout(() => titleElem.classList.add('animate'), 200));
          if (descElem) timers.push(setTimeout(() => descElem.classList.add('animate'), 400));
          if (imgElem) timers.push(setTimeout(() => imgElem.classList.add('animate'), 100));
          
          // Nettoyer les timers si le composant est d√©mont√©
          return () => {
            timers.forEach(timer => clearTimeout(timer));
          };
        }
      },
      { threshold: 0.3 }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => {
      if (cardRef.current) {
        observer.unobserve(cardRef.current);
      }
    };
  }, [index]);

  return (
    <div className={`service-card ${index >= 2 ? 'no-icon' : ''}`} ref={cardRef}>
      <div className="service-number">{`0${index + 1}`}</div>
      <div className="service-image-container">
        <img src={image} alt={title} className="service-image" />
        {index < 2 && (
          <div className="service-icon-circle">{icon}</div>
        )}
      </div>
      <div className="service-content">
        <h3 className="service-title">{title}</h3>
        <p className="service-description">{description}</p>
      </div>
    </div>
  );
};

// Main Component
const Home = () => {
  const { t } = useLanguage();
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [progress, setProgress] = useState(0);
  const images = [bannerBackground1, bannerBackground2, bannerBackground3];

  const [showBackToTop, setShowBackToTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowBackToTop(window.scrollY > 500);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Fonction am√©lior√©e pour le retour en haut avec reset de la barre de progression
  const handleBackToTop = () => {
    const progressBar = document.querySelector('.timeline-progress');
    const processSection = document.querySelector('.services-section.process-section');

    if (progressBar) {
      progressBar.classList.add('reset');
      progressBar.style.height = '5%'; // R√©initialiser la barre de progression
    }
  
    // Si la section "process-section" existe, scroller vers son d√©but
    if (processSection) {
      processSection.scrollIntoView({
        behavior: 'smooth', // D√©filement fluide
        block: 'start' // Aligner au d√©but de la section
      });
    } else {
      // Sinon, scroller vers le haut de la page
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  
    // R√©activer la transition lente apr√®s le retour en haut
    setTimeout(() => {
      if (progressBar) {
        progressBar.classList.remove('reset');
      }
    }, 300); // R√©duit le d√©lai √† 300ms pour un retour plus rapide
  };

  useEffect(() => {
    const handleScroll = () => {
      const section = document.querySelector('.services-section.process-section');
      const progress = document.querySelector('.timeline-progress');
      
      if (section && progress) {
        const sectionRect = section.getBoundingClientRect();
        const viewportHeight = window.innerHeight;
        
        // Si la section est visible
        if (sectionRect.top < viewportHeight && sectionRect.bottom > 0) {
          let progressValue;
          
          if (sectionRect.top >= 0) {
            // Au d√©but de la section
            progressValue = 5;
          } else if (sectionRect.bottom <= viewportHeight) {
            // Section compl√®tement visible dans la fen√™tre
            progressValue = 100;
          } else {
            // Calcul bas√© sur combien on a d√©fil√©
            const totalHeight = section.offsetHeight;
            const visibleHeight = Math.min(viewportHeight, sectionRect.bottom) - Math.max(0, sectionRect.top);
            const scrollProgress = (Math.abs(sectionRect.top) + visibleHeight) / totalHeight;
            progressValue = Math.min(100, Math.max(5, scrollProgress * 100));
          }
          
          // Appliquer la hauteur
          progress.style.height = `${progressValue}%`;
          setProgress(progressValue);
          console.log("Progress updated to: ", progressValue);
        }
      }
    };
    
    // Ajouter plus d'√©v√©nements pour capturer tous les types de d√©filement
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('wheel', handleScroll, { passive: true });
    window.addEventListener('touchmove', handleScroll, { passive: true });
    
    // Ex√©cuter imm√©diatement
    handleScroll();
    
    // Ex√©cuter apr√®s un court d√©lai pour s'assurer que tout est charg√©
    const timers = [
      setTimeout(handleScroll, 100),
      setTimeout(handleScroll, 500),
      setTimeout(handleScroll, 1000)
    ];
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('wheel', handleScroll);
      window.removeEventListener('touchmove', handleScroll);
      timers.forEach(timer => clearTimeout(timer));
    };
  }, []);

  // Remplacez l'useEffect qui contient resetProgress
  useEffect(() => {
    // R√©initialiser la barre uniquement au montage initial, pas lors des scrolls
    const initializeProgress = () => {
      const progress = document.querySelector('.timeline-progress');
      if (progress) {
        // D√©finir une valeur initiale de 5%
        progress.style.height = '5%';
      }
    };
    
    // Initialiser la progress bar
    initializeProgress();
    
    let positionTimer;
    // V√©rifier si nous sommes d√©j√† dans la vue de la section
    const checkInitialPosition = () => {
      const section = document.querySelector('.services-section');
      if (section) {
        const sectionRect = section.getBoundingClientRect();
        // Si la section est d√©j√† visible √† l'√©cran au chargement
        if (sectionRect.top < window.innerHeight && sectionRect.bottom > 0) {
          // D√©clencher un √©v√©nement de d√©filement pour mettre √† jour la progression
          window.dispatchEvent(new Event('scroll'));
        }
      }
    };
    
    // V√©rifier la position initiale apr√®s un court d√©lai
    positionTimer = setTimeout(checkInitialPosition, 300);
    
    // Nettoyer les timers
    return () => {
      if (positionTimer) clearTimeout(positionTimer);
    };
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      const progressBar = document.querySelector('.timeline-progress');
      const scrollTop = window.scrollY;

      if (progressBar) {
        if (scrollTop === 0) {
          // R√©initialiser la barre de progression lorsque l'utilisateur est en haut
          progressBar.style.height = '5%';
        }
      }
    };

    window.addEventListener('scroll', handleScroll);

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  const handlePrevClick = () => {
    setCurrentImageIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);
  };

  const handleNextClick = () => {
    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  const handleDotClick = (index) => {
    setCurrentImageIndex(index);
  };

  const forceProgressUpdate = () => {
    const section = document.querySelector('.services-section');
    const progress = document.querySelector('.timeline-progress');
    
    if (section && progress) {
      const sectionRect = section.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      
      if (sectionRect.top < viewportHeight && sectionRect.bottom > 0) {
        let progressValue;
        
        if (sectionRect.top >= 0) {
          progressValue = 5;
        } else if (sectionRect.bottom <= viewportHeight) {
          progressValue = 100;
        } else {
          const scrolledPast = Math.abs(sectionRect.top);
          const totalToScroll = sectionRect.height - viewportHeight;
          progressValue = Math.min(100, Math.max(5, (scrolledPast / totalToScroll) * 100));
        }
        
        progress.style.height = `${progressValue}%`;
        setProgress(progressValue);
      }
    }
  };

  return (
    <div className="home-page">
      <Header />
      
      <div className="hero-section">
        {images.map((image, index) => (
          <img
            key={index}
            src={image}
            alt={`Background ${index + 1}`}
            className={`hero-image ${index === currentImageIndex ? "active" : ""}`}
          />
        ))}
        <div className="hero-content">
          <h1>{t?.hero?.slides?.[currentImageIndex]?.title || heroTexts[currentImageIndex].title}</h1>
          <p>{t?.hero?.slides?.[currentImageIndex]?.description || heroTexts[currentImageIndex].description}</p>
          <button className="cta-button">{t?.hero?.cta || "Explorer"}</button>
          <button onClick={() => {
            const servicesSection = document.querySelector('.services-section');
            if (servicesSection) {
              servicesSection.scrollIntoView({ behavior: 'smooth' });
              // Utiliser une fonction locale qui n'utilise pas setProgress directement
              setTimeout(() => {
                const section = document.querySelector('.services-section');
                const progress = document.querySelector('.timeline-progress');
                if (section && progress) {
                  progress.style.height = '30%'; // Valeur initiale apr√®s clic
                  setTimeout(() => window.dispatchEvent(new Event('scroll')), 700);
                }
              }, 500);
            }
          }}>
            Voir notre processus
          </button>
        </div>
        <button className="prev-button" onClick={handlePrevClick}>‚ùÆ</button>
        <button className="next-button" onClick={handleNextClick}>‚ùØ</button>
        <div className="dots-container">
          {images.map((_, index) => (
            <span
              key={index}
              className={`dot ${index === currentImageIndex ? "active" : ""}`}
              onClick={() => handleDotClick(index)}
            ></span>
          ))}
        </div>
      </div>

      <div className="our-services-section">
        <div className="section-header-animated">
          <h2 className="animated-title">{t?.services?.title || "Nos Services"}</h2>
          <div className="title-underline"></div>
          <p className="animated-subtitle">{t?.services?.subtitle || "Des solutions compl√®tes pour vos besoins"}</p>
        </div>
        <div className="services-cards-container">
          {services.map((service, index) => (
            <div key={service.id} className="service-card">
              <div className="service-icon-circle">
                {service.icon}
              </div>
              <div className="service-content">
                <h3 className="service-title">{t?.services?.list?.[index]?.title || service.title}</h3>
                <p className="service-description">{t?.services?.list?.[index]?.description || service.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="services-section process-section">
        <div className="timeline-wrapper">
          <div className="timeline-line"></div>
          <div className="timeline-progress" style={{ height: `${progress}%` }}></div>
        </div>
        {processusProduction.map((processus, index) => (
          <ServiceCard
            key={processus.id}
            title={processus.title}
            description={processus.description}
            icon={processus.icon}
            image={processus.image}
            index={index}
          />
        ))}
      </div>

      <div className="why-choose-us-section">
        <h2 className="section-title">{t?.whyUs?.title || "Pourquoi Nous Choisir"}</h2>
        <p className="section-subtitle">{t?.whyUs?.subtitle || "Des engagements forts pour votre satisfaction"}</p>
        <div className="why-choose-grid">
          {whyChooseUs.map((item, index) => (
            <div key={index} className="why-choose-card">
              <div className="why-choose-icon">
                <span className="icon-circle">{item.icon}</span>
              </div>
              <h3>{t?.whyUs?.reasons?.[index]?.title || item.title}</h3>
              <p>{t?.whyUs?.reasons?.[index]?.description || item.description}</p>
              <div className="card-decoration"></div>
            </div>
          ))}
        </div>
      </div>

      <PreFooter />

      <Footer />
      <WhatsAppButton />

      {/* Ajoutez ces √©l√©ments d√©coratifs dans les sections appropri√©es */}
      <div className="dots-decoration top-right"></div>
      <div className="dots-decoration bottom-left"></div>
      <div className="circle-decoration lg" style={{top: '-200px', right: '-200px'}}></div>
      <div className="circle-decoration sm" style={{bottom: '100px', left: '50px'}}></div>

      {/* Bouton retour en haut */}
      <div className="back-to-top" onClick={handleBackToTop} style={{ display: showBackToTop ? 'block' : 'none' }}>
        <i className="fas fa-arrow-up"></i>
      </div>

      {/* CTA flottant optionnel */}
      <div className="floating-cta visible">
        Nous contacter
      </div>
    </div>
  );
};

export default Home;